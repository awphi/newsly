openapi: 3.0.0
info:
  title: Newsly
  version: '1.0'
  contact:
    name: awphi
    url: 'https://github.com/awphi'
    email: admin@adamw.ph
  description: |
    # Newsly API
    ## Description
    Developed as part of a programming summative for Programming Year 1 @ Durham University. Intended to interface with the newsly client written using bootstrap with vanilla CSS, JS & HTML.

    ## Notes
    As a simple API (as per the design spec of the project) there is no authentication, usage limits or database whatsoever. Performance therefore may be subpar if a large number of stories are loaded. It follows that the API will also suffer from security issues like comment/story spamming as there is no limits or authentication to prevent this.
servers:
  - url: 'http://127.0.0.1:3000'
    description: dev
paths:
  /stories-list:
    parameters: []
    get:
      summary: Obtain list of story IDs
      tags:
        - stories
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                description: Strings returned are all story IDs
                items:
                  type: string
        '400':
          description: |-
            Bad Request
            Returned if sort or search query params did not pass validation rules.
          headers: {}
          content:
            text/html:
              schema:
                type: string
                description: Bad Request
              examples:
                example-1: {}
      operationId: get-stories-list-sort
      description: Retrieve all the stories loaded on the server in a given order with or without a given search parameter.
      parameters:
        - schema:
            type: string
            minLength: 3
          in: query
          name: search
          description: String to search the titles of news stories with.
        - schema:
            type: string
            enum:
              - date-ascending
              - date-descending
              - popularity-ascending
              - popularity-descending
              - comments-ascending
              - comments-descending
            default: date-descending
          in: query
          name: sort
          description: Type of sort to use for the retured list.
  '/stories/{storyId}':
    parameters:
      - schema:
          type: string
        name: storyId
        in: path
        required: true
        description: Story ID of the story you want to retrieve.
    get:
      summary: Obtain data on story
      tags:
        - stories
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/story'
        '400':
          description: Bad Request
          content:
            text/html:
              schema:
                type: string
                description: Bad Request
      operationId: get-stories-storyId
      description: 'Retrieve the data on a given story from its ID. IDs are usually obtained with the [stories-list endpoint](get-stories-list-sort).'
  '/stories/{storyId}/comment':
    parameters:
      - schema:
          type: string
        name: storyId
        in: path
        required: true
    post:
      summary: Post a comment on a given story
      operationId: post-stories-storyId-comment
      description: Post a comment to a story of a given ID.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/comment'
      responses:
        '200':
          description: OK
        '400':
          description: Bad Request
      tags:
        - comments
        - stories
components:
  schemas:
    story:
      title: story
      type: object
      x-tags:
        - models
        - stories
      description: Representation of a story.
      x-examples:
        example-1:
          _id: story1
          comments:
            - author: Julio Marucci
              date: 1583430279222
              body: 'Refried beans!'
          body: 'Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.'
          title: Covid-19 cases rise in the UK
          author: Genghis Khan
          subtitle: Boris Johnson comments on his plan to tackle this.
          date: 1583430030752
          images:
            - header
            - bonus
            - bonus1
          views: 75
      properties:
        _id:
          type: string
        comments:
          type: array
          items:
            $ref: '#/components/schemas/comment'
        author:
          type: string
        title:
          type: string
        subtitle:
          type: string
        body:
          type: string
        date:
          type: integer
        views:
          type: integer
        images:
          type: array
          items:
            type: string
      required:
        - author
        - title
        - subtitle
        - body
    comment:
      title: comment
      type: object
      properties:
        author:
          type: string
          description: Author of the comment (set by the original comment creator)
        date:
          type: integer
          description: Timestamp at which the comment was posted
        body:
          type: string
          description: |
            Main content of comment
      required:
        - author
        - body
      x-tags:
        - models
        - comments
      description: Representation of a user-comment on a story.
      x-examples:
        example-1:
          author: John Doe
          date: 1583430279222
          body: 'Comment content!'
